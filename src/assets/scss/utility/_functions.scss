@use 'sass:math';
@import 'mixins';
// import math
$browser-default-font-size: 16px !default;
$html-font-size: 100%;

/*

	REMs

*/

$rems-on: true !default;
$rems-base-font-size: calc($browser-default-font-size / 100%) * $html-font-size !default;
@function rem($size, $reverse: false) {
    $html-font-size-units: if(str-index(#{$html-font-size}, px), px, '%');
    $unitless: strip-unit($size);
    $unitless-base: strip-unit(if($html-font-size-units==px, $html-font-size, $rems-base-font-size));
    @if $reverse==false {
        @if $rems-on {
            @if str-index(#{$size}, 'px') {
                @return math.div($unitless, $unitless-base) * 1rem;
            }
            @else if str-index(#{$size}, 'rem') {
                @return $size;
            }
        }
        @else {
            @if str-index(#{$size}, 'px') {
                @return $size;
            }
            @else if str-index(#{$size}, 'rem') {
                @return $unitless * $unitless-base * 1px;
            }
        }
    }
    @else {
        @return $unitless * $unitless-base * 1px;
    }
}


/*

	EMs calculator

*/

$em-media-queries: true !default;
@function em($size, $base: $browser-default-font-size) {
    $size: if(str-index(#{$size}, 'rem'), rem($size, true), $size);
    $base: if(unit($base)==rem, rem($base, true), $base);
    $unitless: strip-unit($size);
    $unitless-base: strip-unit($base);
    @if $em-media-queries {
        @return math.div($unitless, $unitless-base) * 1em;
    }
    @else {
        @return $size;
    }
}

@function strip-unit($number) {
    @if type-of($number)=='number' and not unitless($number) {
        @return math.div($number , ($number * 0 + 1));
    }
    @return $number;
}


/*

	SVG inliner

*/
//
@function inline-svg($svg-path) {
    $svg-content: '';
    @if file-exists($svg-path) {
        $svg-content: str-slice(unquote(file-read($svg-path)), 5, -6); // Remove "<?xml" and "</svg>"
        $svg-content: str-replace($svg-content, '\n', ''); // Remove newlines
        $svg-content: str-replace($svg-content, '\r', ''); // Remove carriage returns
        $svg-content: str-replace($svg-content, '"', "'"); // Replace double quotes with single quotes
        @return url('data:image/svg+xml,' + $svg-content);
    } @else {
        @warn 'SVG file #{$svg-path} not found';
        @return false;
    }
}

