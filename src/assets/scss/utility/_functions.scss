@use 'sass:math';
@import 'mixins';
// import math
$browser-default-font-size: 16px !default;
$html-font-size: 100%;

/*

	REMs

*/

$rems-on: true !default;
$rems-base-font-size: calc($browser-default-font-size / 100%) * $html-font-size !default;
@function rem($size, $reverse: false) {
    $html-font-size-units: if(str-index(#{$html-font-size}, px), px, '%');
    $unitless: strip-unit($size);
    $unitless-base: strip-unit(if($html-font-size-units==px, $html-font-size, $rems-base-font-size));
    @if $reverse==false {
        @if $rems-on {
            @if str-index(#{$size}, 'px') {
                @return math.div($unitless, $unitless-base) * 1rem;
            }
            @else if str-index(#{$size}, 'rem') {
                @return $size;
            }
        }
        @else {
            @if str-index(#{$size}, 'px') {
                @return $size;
            }
            @else if str-index(#{$size}, 'rem') {
                @return $unitless * $unitless-base * 1px;
            }
        }
    }
    @else {
        @return $unitless * $unitless-base * 1px;
    }
}


/*

	EMs calculator

*/

$em-media-queries: true !default;
@function em($size, $base: $browser-default-font-size) {
    $size: if(str-index(#{$size}, 'rem'), rem($size, true), $size);
    $base: if(unit($base)==rem, rem($base, true), $base);
    $unitless: strip-unit($size);
    $unitless-base: strip-unit($base);
    @if $em-media-queries {
        @return math.div($unitless, $unitless-base) * 1em;
    }
    @else {
        @return $size;
    }
}

@function strip-unit($number) {
    @if type-of($number)=='number' and not unitless($number) {
        @return math.div($number , ($number * 0 + 1));
    }
    @return $number;
}


/*

	SVG inliner

*/

@function svg-url($svg) {
    //
    //  Add missing namespace
    //
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '&', '%26');
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}
