/*

	Media Query mixin

	See https://github.com/sass-mq/sass-mq/ for original full version.

	@example scss
	 .element {
	   @include mq($from: mobile) {
		 color: red;
	   }

	   @include mq($to: tablet) {
		 color: blue;
	   }

	   @include mq(mobile, tablet) {
		 color: green;
	   }

	   @include mq($from: tablet, $and: '(orientation: landscape)') {
		 color: teal;
	   }

	   @include mq(em(950px)) {
		 color: hotpink;
	   }

	   @include mq(em(950px), $media-feature: height) {
		 color: hotpink;
	   }

	   @include mq(tablet, $media-type: screen) {
		 color: hotpink;
	   }

	   // Advanced use:
	   $custom-breakpoints: (L: 900px, XL: 1200px);
	   @include mq(L, $bp: $custom-breakpoints) {
		 color: hotpink;
	   }
	 }

*/

@mixin mq(
	$from: false,
	$to: false,
	$and: false,
	$media-feature: width,
	$media-type: screen,
	$bp: $breakpoints
) {
	$min-width: 0;
	$max-width: 0;
	$media-query: '';

	// From: this breakpoint (inclusive)
	@if $from {
		@if type-of($from) == number {
			$min-width: $from;
		} @else {
			$min-width: map_get($bp, $from);
		}
	}

	// Until: that breakpoint (exclusive)
	@if $to {
		@if type-of($to) == number {
			$max-width: $to;
		} @else {
			$negative: if($em-media-queries, 0.01em, 1px);
			$max-width: map_get($bp, $to) - $negative;
		}
	}

	@if $media-feature {
		@if $min-width != 0 { $media-query: '#{$media-query} and (min-#{$media-feature}: #{$min-width})'; }
		@if $max-width != 0 { $media-query: '#{$media-query} and (max-#{$media-feature}: #{$max-width})'; }
	}

	@if $and {
		$media-query: '#{$media-query} and #{$and}';
	}

	// Remove unnecessary media query prefix 'all and '
	@if ($media-type == 'all' and $media-query != '') {
		$media-type: '';
		$media-query: str-slice(unquote($media-query), 6);
	}

	@media #{$media-type + $media-query} {
		@content;
	}
}

@mixin prefix($property, $value, $prefixes: ()) {
	@each $prefix in $prefixes {
		-#{$prefix}-#{$property}: $value;
	}

	#{$property}: $value;
}


/*

	Margin / Padding Quick Resets

	example: top & bottom margin set to $spacing-unit
	.element {
		@include push--ends;
	}

	example: left & right padding set to $spacing-unit--small
	.element {
		@include soft--sides($spacing-unit--small);
	}

*/

// add/remove margins
@mixin push--ends($spacing: $spacing-unit) { margin: { top: $spacing; bottom: $spacing; } }
@mixin push--sides($spacing: $spacing-unit) { margin: { left: $spacing; right: $spacing; } }
@mixin push--auto { margin: { left: auto; right: auto; } }
@mixin offset--sides($spacing: $spacing-unit) { margin: { left: -$spacing; right: -$spacing; } }
@mixin flush--ends { margin: { top: 0; bottom: 0; } }
@mixin flush--sides { margin: { left: 0; right: 0; } }

// add/remove paddings
@mixin soft--ends($spacing: $spacing-unit) { padding: { top: $spacing; bottom: $spacing; } }
@mixin soft--sides($spacing: $spacing-unit) { padding: { left: $spacing; right: $spacing; } }
@mixin hard--ends { padding: { top: 0; bottom: 0; } }
@mixin hard--sides { padding: { left: 0; right: 0; } }


/*

	Helper mixins

*/

// Contain floats / clearfix
@mixin cf {

	&::after {
		content: '';
		display: table;
		clear: both;
	}
}

// Hide from both screenreaders and browsers
@mixin hidden {
	display: none;
	visibility: hidden;
}

@mixin visible($state: 'block') {
	display: unquote($state);
	visibility: visible;
}

//flex box
@mixin flex($vcenter: center, $hcenter: center, $wrap: wrap){
	display:flex;
	flex-wrap:$wrap;
	align-items:$vcenter;
	justify-content: $hcenter;
}
@mixin flex-align-center{
	display:flex;
	flex-wrap:wrap;
	align-items: center;
}
@mixin flex-justify-center{
	display:flex;
	flex-wrap:wrap;
	align-items: center;
	justify-content:center;
}
@mixin flex-space-around{
	display:flex;
	flex-wrap:wrap;
	align-items: center;
	justify-content:space-around;
}
@mixin flex-space-between{
	display:flex;
	flex-wrap:wrap;
	align-items: center;
	justify-content:space-between;
}

// Hide only visually, but have it available for screenreaders
@mixin vh($focusable: false) {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;

	@if $focusable {
		@include vh-focusable;
	}
}

// Allow the element to be focusable when navigated to via the keyboard
@mixin vh-focusable {
	&:active,
	&:focus {
		clip: auto;
		height: auto;
		margin: 0;
		overflow: visible;
		position: static;
		width: auto;
	}
}

// Hide visually and from screenreaders, but maintain layout
@mixin invisible {
	visibility: hidden;
}


/*

	Form input placeholder text

	example:

	input,
	textarea {
		@include input-placeholder {
			color: $grey;
		}
	}

*/

@mixin input-placeholder {
	&.placeholder { @content; }
	&:-moz-placeholder { @content; }
	&::-moz-placeholder { @content; }
	&:-ms-input-placeholder { @content; }
	&::-webkit-input-placeholder { @content; }
}


/*

	Retina images

	example:

	.element {
		@include retina {
			background-image: url(../img/background@2x.png);
		}
	}

*/

@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
	only screen and (-moz-min-device-pixel-ratio: 1.5),
	only screen and (-o-min-device-pixel-ratio: 3 / 2),
	only screen and (min-device-pixel-ratio: 1.5),
	only screen and (min-resolution: 1.5dppx) {
		@content;
	}
}


/*

	Content margins

	fore removing first/last child margins

	example: default
	.element {
		@include content-margins;
	}

	output:
	.element > *:first-child {
		margin-top: 0;
	}
	.element > *:last-child {
		margin-bottom: 0;
	}

	example: empty selector
	.element {
		@include content-margins('false');
	}

	output:
	.element:first-child {
		margin-top: 0;
	}
	.element:last-child {
		margin-bottom: 0;
	}

*/

@mixin content-margins($selector: '> *', $last-child: false) {
	@if not $selector {
		$selector: '&';
	}

	#{unquote($selector)} {
		&:first-child { margin-top: 0; }
		@if $last-child {
			&:last-child { margin-bottom: 0; }
		}
	}
}


/*

	CSS Triangle

	used for creating CSS only triangles

	example:
	.element {

		&::before {
			@include css-triangle(blue, down);
		}
	}

*/

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
	@include pseudo($pos: $position);
	width: 0;
	height: 0;

	@if $round {
		border-radius: 3px;
	}

	@if $direction == down {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
		margin-top: 0 - round( $size / 2.5 );
	} @else if $direction == up {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
		margin-bottom: 0 - round( $size / 2.5 );
	} @else if $direction == right {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
		margin-right: -$size;
	} @else if  $direction == left {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
		margin-left: -$size;
	}
}


/*

	Hide text

	example:

	.element {
		@include hide-text;
	}

*/

@mixin hide-text($break: false, $indent: 200%, $align: left, $overflow: hidden) {
	@if $break {
		position: absolute;
		top: 0; left: 0;
		pointer-events: none;
	}
	text: {
		indent: $indent;
		align: $align;
	}
	font-size: 0;
	white-space: nowrap;
	@if $overflow {
		overflow: $overflow;
	}
}


/*

	Responsive ratio

	Used for creating scalable elements that maintain the same ratio

	example:
	.element {
		@include responsive-ratio(400, 300);
	}

*/


/*

	Icon

	For using fontastic icons in pseudo elements

*/




/*

	Colours

	background, colour, etc. match up with colour map in _variables.scss

	modify to suit per project

*/

@mixin colours(
	$selector: false,
	$chain: '&--',
	$background: 'base',
	$border: true
) {

	@each $name, $values in $colours {
		#{$chain}#{$name} {

			@if $selector {

				#{$selector} {
					@if $background {
						background-color: map-get($values, $background);
						@if $border {
							border-color: darken(map-get($values, $background), 20%);
						}
					}
				}

			} @else {

				@if $background {
					background-color: map-get($values, $background);
				}

			}
		}

	}

}


/*

	Fluid Property

	http://www.adrenalinmedia.com.au/the-agency/insights/this-changes-everything-css-fluid-properties.aspx

	HTML:

	<h1 class="element">
		<span>Text to replace</span>
	</h1>

	example:
	h1 {
		@include fp(font-size, 50, 100); // 50px at 320, 100px at 1920;
	}

	output:
	h1 {
		font-size: calc(3.125vw + 40px); //This is the magic!
	}

	@media (max-width:320px){ //Clips the start to the min value
		font-size:50px;
	}

	@media (min-width:1920px){ //Clips the end to the max value
		font-size:100px;
	}


*/

@mixin fp($property, $min, $max, $start: 320, $end: breakpoint('desktop'), $clip: true, $clipAtStart: true, $clipAtEnd: true) {
	$start: $start / ($start * 0 + 1);
	$end: $end / ($end * 0 + 1);
	$multiplier: ($max - $min) / ($end - $start) * 100;
	$adder: ($min * $end - $max * $start) / ($end - $start);
	$formula: calc(#{$multiplier + 0vw} + #{$adder + 0px});
	@if $clip and $clipAtStart {
		@media (max-width: #{$start + 0px}) {
			#{$property}: $min + 0px;
		}
	}
	@if $clip and $clipAtEnd {
		@media (min-width: #{$end + 0px}) {
			#{$property}: $max + 0px;
		}
	}
	#{$property}: $formula;
}


/*

	align
	h1 {
		@include align($vertical: true, $horizontal: false, $position: relative);
	}
*/

@mixin align($vertical: true, $horizontal: false, $position: relative) {
	@if $position {
		position: $position;
	}
	@if $vertical {
		top: 50%;
	}
	@if $horizontal {
		left: 50%;
	}

	@if $vertical and $horizontal {
		transform: translateX(-50%) translateY(-50%);
	} @else if $vertical {
		transform: translateY(-50%);
	} @else {
		transform: translateX(-50%);
	}
}

@mixin antialias {
	font-smoothing: antialiased;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin appearance($val: none) {
	-webkit-appearance: $val;
	-moz-appearance: $val;
	appearance: $val;
}

@mixin font-size($sizes) {
	@each $breakpoint, $size in $sizes {
		@if $breakpoint == base {
			font-size: $size;
		} @else {
			@include mq($breakpoint) {
				font-size: $size;
			}
		}
	}
}

@mixin hardware($backface: true, $perspective: 1000) {

	@if $backface {
		backface-visibility: hidden;
	}

	perspective: $perspective;
}

@mixin pos($pos, $t, $r, $b, $l, $z: false, $hardware: true) {
	@if $pos == fixed and $hardware { @include hardware; }
	@if $pos { position: $pos; }
	@if $t { top: $t; }
	@if $r { right: $r; }
	@if $b { bottom: $b; }
	@if $l { left: $l; }
	@if $z { z-index: $z; }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
	content: $content;
	display: $display;
	position: $pos;
}

@mixin selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

@mixin truncate($truncation-boundary) {
	max-width: $truncation-boundary;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin unlist($margin: true, $padding: true) {
	@if $margin {
		@if $margin == 'vertical' {
			@include flush--ends;
		} @else if $margin == 'horizontal' {
			@include flush--sides;
		} @else {
			margin: 0;
		}
	}
	@if $padding {
		padding: 0;
	}
	list-style: none;
}


@mixin unselectable {
	-webkit-touch-callout: none;
	user-select: none;
}

@mixin background-gradient($start-color, $end-color, $orientation) {
	background: $start-color;

	@if $orientation == 'vertical' {
		background: -webkit-linear-gradient(top, $start-color, $end-color);
		background: linear-gradient(to bottom, $start-color, $end-color);
	} @else if $orientation == 'horizontal' {
		background: -webkit-linear-gradient(left, $start-color, $end-color);
		background: linear-gradient(to right, $start-color, $end-color);
	} @else {
		background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
		background: radial-gradient(ellipse at center, $start-color, $end-color);
	}
}

@mixin border-radius-separate($top-left-radius, $top-right-radius, $bottom-right-radius, $bottom-left-radius) {
	@include prefix(border-top-left-radius, $top-left-radius, 'webkit' 'moz');
	@include prefix(border-top-right-radius, $top-right-radius, 'webkit' 'moz');
	@include prefix(border-bottom-right-radius, $bottom-right-radius, 'webkit' 'moz');
	@include prefix(border-bottom-left-radius, $bottom-left-radius, 'webkit' 'moz');
}

@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

/// Horizontally and vertically centers block elements
@mixin center-both {
	position: absolute;
	top: 50%;
	left: 50%;
	@include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

/// Horizontally centers block elements
@mixin center-horizontal {
	position: absolute;
	left: 50%;
	@include prefix(transform, translateX(-50%), 'webkit' 'ms');
}

/// Horizontally and vertically centers block elements
@mixin center-vertical {
	position: absolute;
	top: 50%;
	@include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

/// Vertically centers block elements with known height.

@mixin center-h($height) {
	position: absolute;
	top: 50%;
	height: $height;
	margin-top: -($height / 2);
}

/// Vertically centers block elements with unknown height.

@mixin center-h--unk {
	position: relative;
	top: 50%;
	@include prefix(transform, translateY(-50%), 'webkit' 'ms');
}

@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
	position: $type;
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
}
@mixin text-shadow($value) {
	text-shadow: rgba(255, 255, 255, $value) 0 1px 0;
}
@mixin transform($transformation){
	@include prefix(transform, $transformation, 'webkit' 'ms');
}
@mixin transition($time: 1s, $timing-function: ease-in-out) {
	@include prefix(transition, all $time $timing-function, 'webkit');
}

@mixin scale($scale-change:1.1, $animation-properties: 1s ease-in-out) {
	$alias: 'scale-' + str-replace($scale-change + '', '.', '-');

	@include keyframes($alias){
		0%, 100% {
			@include transform(scale(1));
		}
		50% {
			@include transform(scale($scale-change));
		}
	}

	@include prefix(animation, $alias $animation-properties, 'webkit');
}

/// Slide-in-from creates and calls an animation that slides an element on a given axis for a given amount of space. The offset is measured in the distance from the location the element would naturally fall in, were transforms not applied to it.
/// @access public
/// @param {String} $slide-axis [x] - The axis on which to slide; 'x' or 'y'.
/// @param {Length} $slide-offset [-100px] - The offset from the natural element position from which to begin the animation.
/// @param {List} $animation-properties [3s ease-out] - Any animation properties to be included.
/// @example scss - Usage
///   .foo {
///     @include slide-in-from(y, -200px, 3s ease alternate infinite);
///   }
/// @example css - Result
///   .foo {
///     -webkit-animation: slide-in-y--200px 3s linear infinite alternate;
///     animation: slide-in-y--200px 3s linear infinite alternate;
///   }
///
/// // (the @keyframes are also generated with a -webkit- vendor prefix)
///   @keyframes slide-in-y--200px {
///     0% {
///       opacity: 0;
///       -webkit-transform: translateY(-200px);
///       -ms-transform: translateY(-200px);
///       transform: translateY(-200px);
///     }
///     75% {
///       -webkit-transform: translateY(0);
///       -ms-transform: translateY(0);
///       transform: translateY(0);
///     }
///     100% {
///       opacity: 1;
///     }
///   }
@mixin slide-in-from($slide-axis: x, $slide-offset: -100px, $animation-properties: 3s ease-out) {
	$slide-start: if($slide-axis == x, translateX($slide-offset), translateY($slide-offset));
	$slide-end: if($slide-axis == x, translateX(0), translateY(0));

	@include keyframes(slide-in-#{$slide-axis}-#{$slide-offset}){
		0% {
			@include opacity(0);
			@include transform($slide-start);
		}
		75% {
			@include transform($slide-end);
		}
		100% {
			@include opacity(1);
		}
	}

	@include prefix(animation, slide-in-#{$slide-axis}-#{$slide-offset} $animation-properties, 'webkit');
}

/*

	Font face

	example:

	@include font-face('Clarendon', 'clarendon-webfont');
	@include font-face('Clarendon', 'clarendon-webfont', $w--bold, italic);

*/

@mixin font-face($name, $filename, $weight: normal, $style: normal) {
	@font-face {
		font-family: $name;
		src: url('../fonts/#{$filename}.woff2') format('woff2'),
		url('../fonts/#{$filename}.woff') format('woff');
		font-style: $style;
		font-weight: $weight;
	}
}
@mixin circle($size: 50px, $color: #000) {
	width: $size; height: $size; border-radius: $size;
	background-color: $color;
}

@mixin truncate($lines, $lh: 1.2,$spacer:0){
    line-height: $lh;
    max-height: $lh * $lines + $spacer + em;
    // overflow: hidden;
    text-overflow: ellipsis;
    text-overflow: -o-ellipsis-lastline;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    /* number of lines to show */
    -webkit-box-orient: vertical;
    overflow: hidden;
}